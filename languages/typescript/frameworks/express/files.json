{
  "src/controllers/index.ts": "import { Response } from \"express\";\n\nexport default abstract class ControllerBase {\n    protected file(res: Response, fileName: string, data: unknown) {\n        res.setHeader(\"Content-Type\", \"application/pdf\");\n        res.setHeader(\n            \"Content-Disposition\",\n            `attachment; filename=${fileName}`\n        );\n        res.send(data);\n    }\n\n    protected success(res: Response, data: unknown) {\n        return res.status(200).json(data);\n    }\n\n    protected create(res: Response, data: unknown) {\n        return res.status(201).json(data);\n    }\n\n    protected noContent(res: Response) {\n        return res.status(204).send();\n    }\n}\n",
  "src/docs/index.ts": "import { NODE_ENV, PORT } from \"@/configs/variables\";\nimport basicAuthHandler from \"@/middlewares/basicAuthHandler\";\nimport { Express } from \"express\";\nimport { serve, setup } from \"swagger-ui-express\";\n\nimport components from \"./components\";\nimport paths from \"./paths\";\nimport schemas from \"./schemas\";\n\nconst config = {\n    openapi: \"3.0.0\",\n    info: {\n        title: \"\",\n        version: \"0.0.1\",\n    },\n    servers: [\n        {\n            url: `http://localhost:${PORT}`,\n            description: \"Server de desenvolvimento\",\n        },\n    ],\n    tags: [],\n    components,\n    paths,\n    schemas,\n};\n\nconst setupDocs = (app: Express) => {\n    if (NODE_ENV !== \"production\") {\n        app.use(\"/api-docs\", serve, basicAuthHandler, setup(config));\n    }\n};\n\nexport default setupDocs;\n",
  "src/middlewares/basicAuthHandler.ts": "import { BASIC_AUTH_PASSWORD, BASIC_AUTH_USERNAME } from \"@/configs/variables\";\nimport { ForbiddenError, MissingError } from \"@/errors\";\nimport { NextFunction, Request, Response } from \"express\";\n\nconst basicAuthHandler = (\n    req: Request,\n    _res: Response,\n    next: NextFunction\n): Response | void => {\n    const authHeader = req.headers.authorization;\n\n    if (authHeader) {\n        const base64Credentials = authHeader.split(\" \")[1];\n        const credentials = Buffer.from(base64Credentials, \"base64\").toString(\n            \"utf-8\"\n        );\n        const [username, password] = credentials.split(\":\");\n\n        if (\n            username === BASIC_AUTH_USERNAME &&\n            password === BASIC_AUTH_PASSWORD\n        ) {\n            return next();\n        }\n\n        throw new ForbiddenError();\n    }\n\n    throw new MissingError();\n};\n\nexport default basicAuthHandler;\n",
  "src/middlewares/errorHandler.ts": "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { NODE_ENV } from \"@/configs/variables\";\nimport IError from \"@/errors/interface\";\nimport httpResponse from \"@/messages/httpResponses.json\";\nimport { NextFunction, Request, Response } from \"express\";\n\nconst errorHandler = (\n    error: IError,\n    _req: Request,\n    res: Response,\n    _next: NextFunction\n): void => {\n    const status = error.status || 500;\n    const message =\n        status !== 500 || error.status === 500\n            ? error.message\n            : httpResponse[500];\n\n    console.error(NODE_ENV === \"production\" ? JSON.stringify(error) : error);\n\n    const response: Record<string, unknown> = {\n        status,\n        message,\n    };\n\n    if (error.fields) response.fields = error.fields;\n    if (error.error) response.error = error.error;\n    if (error.bankMessage) response.bankMessage = error.bankMessage;\n\n    res.status(status).json(response);\n};\n\nexport default errorHandler;\n",
  "src/middlewares/index.ts": "import { Express } from \"express\";\n\nimport errorHandler from \"./errorHandler\";\n\nconst setupMiddlewares = (app: Express): void => {\n    app.use(errorHandler);\n};\n\nexport default setupMiddlewares;\n",
  "src/routes/index.ts": "import { Router } from \"express\";\n\n\nconst router = Router();\n\nexport default router;\n",
  "src/index.ts": "import cors from \"cors\";\nimport express from \"express\";\nimport { createServer, Server } from \"http\";\n\nimport { PORT } from \"./configs/variables\";\nimport setupDocs from \"./docs\";\nimport setupMiddlewares from \"./middlewares\";\nimport router from \"./routes\";\n\nlet server: Server;\n\nconst initialize = () =>\n    new Promise((resolve, reject) => {\n        const app = express();\n        app.use(cors());\n        app.use(express.json({ limit: \"5mb\" }));\n\n        setupDocs(app);\n\n        app.use(router);\n        setupMiddlewares(app);\n\n        server = createServer(app);\n        server\n            .listen(PORT)\n            .on(\"listening\", async () => {\n                resolve(null);\n            })\n            .on(\"error\", (error) => reject(error));\n    });\n\nconst close = () =>\n    new Promise((resolve, reject) => {\n        server.close((error) => (error ? reject(error) : resolve(null)));\n    });\n\nexport { initialize, close };\n"
}