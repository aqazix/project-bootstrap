{
    ".eslintrc.json": "{\n    'env': {\n        'es2020': true,\n        'node': true,\n        'jest': true,\n        'jasmine': true\n    },\n    'extends': [\n        'airbnb-base',\n        'plugin:@typescript-eslint/recommended',\n        'prettier',\n        'plugin:prettier/recommended'\n    ],\n    'parser': '@typescript-eslint/parser',\n    'parserOptions': {\n        'ecmaVersion': 12,\n        'sourceType': 'module'\n    },\n    'plugins': [\n        '@typescript-eslint',\n        'eslint-plugin-import-helpers',\n        'prettier'\n    ],\n    'rules': {\n        'camelcase': 'off',\n        'import/no-unresolved': 'error',\n        '@typescript-eslint/naming-convention': [\n            'error',\n            {\n                'selector': 'interface',\n                'format': [\n                    'PascalCase'\n                ],\n                'custom': {\n                    'regex': '^I[A-Z]',\n                    'match': true\n                }\n            }\n        ],\n        'class-methods-use-this': 'off',\n        'import/prefer-default-export': 'off',\n        'no-shadow': 'off',\n        'no-console': 'off',\n        'no-useless-constructor': 'off',\n        'no-empty-function': 'off',\n        'no-underscore-dangle': 'off',\n        'no-restricted-globals': 'off',\n        'no-use-before-define': [\n            'error',\n            {\n                'classes': false\n            }\n        ],\n        'lines-between-class-members': 'off',\n        'import/extensions': [\n            'error',\n            'ignorePackages',\n            {\n                'ts': 'never'\n            }\n        ],\n        'import-helpers/order-imports': [\n            'warn',\n            {\n                'newlinesBetween': 'always',\n                'groups': [\n                    'module',\n                    '/^@shared/',\n                    [\n                        'parent',\n                        'sibling',\n                        'index'\n                    ]\n                ],\n                'alphabetize': {\n                    'order': 'asc',\n                    'ignoreCase': true\n                }\n            }\n        ],\n        'import/no-extraneous-dependencies': 'off',\n        'linebreak-style': [\n            'error'\n        ]\n    },\n    'settings': {\n        'import/resolver': {\n            'typescript': {}\n        }\n    }\n}\n",
    "index.ts": "import \"dotenv/config\";\nimport \"express-async-errors\";\nimport \"module-alias/register\";\n\nimport { close, initialize } from \"./src\";\n\nconst shutdown = async (e?: Error) => {\n    let error: Error | unknown = e;\n\n    try {\n        await close();\n    } catch (e: unknown) {\n        error = error || e;\n    }\n\n    process.exit(error ? 1 : 0);\n};\n\nconst startup = async () => {\n    try {\n        await initialize();\n    } catch (e: unknown) {\n        console.log(e);\n        process.exit(1);\n    }\n};\n\nstartup();\n\nprocess.on(\"SIGTERM\", () => shutdown());\nprocess.on(\"SIGINT\", () => shutdown());\nprocess.on(\"uncaughtException\", (e) => {\n    console.log(\"Uncaught exception: \", e);\n\n    shutdown(e);\n});\n",
    "jest.config.js": "module.exports = {\n    roots: ['<rootDir>/tests'],\n    collectCoverage: true,\n    collectCoverageFrom: [\n        '<rootDir>/tests/**/*.ts',\n    ],\n    coverageDirectory: 'coverage',\n    coverageReporters: ['text', 'cobertura'],\n    testEnvironment: 'node',\n    reporters: [\n        'default',\n        ['jest-junit', { usePathForSuiteName: true, outputDirectory: 'coverage' }]\n    ],\n    testResultsProcessor: 'jest-junit',\n    transform: {\n        '.+\\.ts$': 'ts-jest'\n    },\n    moduleNameMapper: {\n        '@/(.*)': '<rootDir>/src/$1'\n    },\n    setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n    testTimeout: 30000\n}\n",
    "src/configs/variables.ts": "/* eslint-disable prefer-destructuring */\nconst SWAGGER_BASIC_AUTH_USERNAME = process.env.BASIC_AUTH_USERNAME ?? \"username\";\nconst SWAGGER_BASIC_AUTH_PASSWORD = process.env.BASIC_AUTH_PASSWORD ?? \"password\";\n\nconst NODE_ENV = process.env.NODE_ENV ?? \"local\";\nconst PORT = process.env.PORT ? parseInt(process.env.PORT, 10) : 3000;\n\nexport {\n    SWAGGER_BASIC_AUTH_USERNAME,\n    SWAGGER_BASIC_AUTH_PASSWORD,\n    NODE_ENV,\n    PORT,\n};\n",
    "src/errors/interface.ts": "interface IError extends Error {\n    error?: Error;\n    fields?: string[];\n    status: number;\n}\n\nexport default IError;\n",
    "src/errors/Authentication/ForbiddenError.ts": "import httpResponse from \"../../messages/httpResponses.json\";\nimport IError from \"../interface\";\n\nexport class ForbiddenError extends Error implements IError {\n    constructor() {\n        super(httpResponse[403]);\n        this.name = \"ForbiddenError\";\n        this.status = 403;\n\n        Object.setPrototypeOf(this, ForbiddenError.prototype);\n    }\n\n    status: number;\n}\n",
    "src/errors/Authentication/MissingError.ts": "import httpResponses from \"../../messages/httpResponses.json\";\nimport IError from \"../interface\";\n\nexport class MissingError extends Error implements IError {\n    constructor() {\n        super(httpResponses[401]);\n        this.name = \"MissingError\";\n        this.status = 401;\n\n        Object.setPrototypeOf(this, MissingError.prototype);\n    }\n\n    status: number;\n}\n",
    "src/errors/Authentication/UnauthorizedError.ts": "import httpResponses from \"../../messages/httpResponses.json\";\nimport IError from \"../interface\";\n\nexport class UnauthorizedError extends Error implements IError {\n    constructor() {\n        super(httpResponses[401]);\n        this.name = \"UnauthorizedError\";\n\n        Object.setPrototypeOf(this, UnauthorizedError.prototype);\n    }\n\n    status = 401;\n}\n",
    "src/errors/Common/MissingFieldsError.ts": "import httpResponses from \"@/messages/httpResponses.json\";\n\nimport IError from \"../interface\";\n\nexport class MissingFieldsError extends Error implements IError {\n    constructor(fields: string[]) {\n        super(httpResponses[422]);\n        this.name = \"MissingFieldsError\";\n        this.status = 422;\n        this.fields = fields;\n\n        Object.setPrototypeOf(this, MissingFieldsError.prototype);\n    }\n\n    status: number;\n    fields: string[];\n}\n",
    "src/helpers/validator.ts": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { MissingFieldsError } from \"@/errors/Common/MissingFieldsError\";\n\nconst verify = (data: any, requiredFields: string[]): string[] => {\n    return requiredFields.filter((field) => {\n        if (field.includes(\".\")) {\n            const [root, ...path] = field.split(\".\");\n\n            return verify(data[root], path).length;\n        }\n\n        return data[field] !== undefined || data[field] !== null;\n    });\n};\n\nconst validate = (data: any, requiredFields: string[]): void => {\n    const missingFields = verify(data, requiredFields);\n\n    if (missingFields.length) throw new MissingFieldsError(missingFields);\n};\n\nexport default validate;\n",
    "src/messages/httpResponses.json": "{\n    \"401\": \"Unauthorized access.\",\n    \"403\": \"Acesso denied.\",\n    \"422\": \"Obligatory fields not informed.\",\n    \"500\": \"An unexpected error ocurred. Please, try again later.\"\n}",
    "src/useCases/interface.ts": "export interface IUseCase {\n    execute(...args: unknown[]): Promise<unknown>;\n}\n\nexport interface IBaseUseCase {\n    requiredFields: Record<string, string[]>;\n    validate(data: Record<string, unknown>, useCase: string): void;\n}\n",
    "tsconfig.json": "{\n    'compilerOptions': {\n        'outDir': 'dist',\n        'module': 'commonjs',\n        'target': 'es5',\n        'sourceMap': true,\n        'emitDecoratorMetadata': true,\n        'experimentalDecorators': true,\n        'rootDir': '.',\n        'baseUrl': 'src',\n        'paths': {\n            '@/*': [\n                '*'\n            ]\n        },\n        'resolveJsonModule': true,\n        'esModuleInterop': true,\n        'forceConsistentCasingInFileNames': true,\n        'strict': true,\n        'skipLibCheck': true,\n        'strictPropertyInitialization': false\n    },\n    'include': [\n        'index.ts',\n        'src',\n        'tests'\n    ],\n    'exclude': [\n        'dist',\n        'node_modules'\n    ]\n}\n"
}